# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jsxgay2Rq8akLpkqXImVTSvDDuI3IHyG
"""
import dash
from dash import dcc, html
import pandas as pd
from plotly.subplots import make_subplots
import plotly.graph_objects as go
import plotly.express as px
evcars = pd.read_csv('./data/IEA-EV-dataEV salesHistoricalCars')

evcars_historical= evcars

# Filter the data for 'EV sales share' category
ev_sales_share_df = evcars_historical[evcars_historical['parameter'] == 'EV sales share']
regions_of_interest = ['World', 'Norway', 'United Kingdom', 'EU27', 'China', 'USA']
ev_sales_share_df = ev_sales_share_df[ev_sales_share_df['region'].isin(regions_of_interest)]
# Aggregate data by summing the EV sales share for each region and year
ev_sales_share_aggregated = ev_sales_share_df.groupby(['region', 'year'], as_index=False)['value'].sum()

y_axis_range = [0, 100]

# Create a subplot layout with 2 rows and 3 columns
Dani1 = make_subplots(
    rows=2, cols=3,
    subplot_titles=regions_of_interest,  # Set titles for each subplot
    shared_yaxes=True,  # Share y-axis across all subplots
)

# Loop through each region to create a line plot and add it to the subplot grid
for i, region in enumerate(regions_of_interest):
    row = i // 3 + 1  # Calculate row number (1 or 2)
    col = i % 3 + 1   # Calculate column number (1, 2, or 3)

    region_data = ev_sales_share_aggregated[ev_sales_share_aggregated['region'] == region]


    trace = go.Scatter(
        x=region_data['year'],
        y=region_data['value'],
        mode='lines',
        name=region
    )


    Dani1.add_trace(trace, row=row, col=col)


Dani1.update_layout(
    title='EV Sales Share (2010-2023) by Region',
    height=800,  # Set the height of the plot
    showlegend=False,  # Hide legend as we have titles for each subplot
)


Dani1.update_yaxes(range=y_axis_range, tickvals=[i for i in range(0, 101, 20)], ticktext=[f'{i}%' for i in range(0, 101, 20)])
Dani1.update_traces(text= ev_sales_share_aggregated['value'].apply(lambda x:"<1%" if x< 1 else f"{x: .0f}%"))
Dani1.show()

# Filter the data for 'EV sales share' category and the year 2023
ev_sales_share_2023 = evcars_historical[(evcars_historical['parameter'] == 'EV sales share') & (evcars_historical['year'] == 2023)]

# Further filter for specific regions
regions_of_interest = ['World', 'Norway', 'United Kingdom', 'EU27', 'China', 'USA','Sweden','Germany','India','South Africa']
ev_sales_share_2023 = ev_sales_share_2023[ev_sales_share_2023['region'].isin(regions_of_interest)]

ev_sales_share_2023_aggregated = ev_sales_share_2023.groupby(['region'], as_index=False)['value'].sum()

ev_sales_share_2023_aggregated = ev_sales_share_2023_aggregated.sort_values(by='value', ascending=True)

# Create a horizontal bar graph
Dani2 = px.bar(ev_sales_share_2023_aggregated,
             x='value',
             y='region',
             orientation='h',
             title='EV Sales Share by Region in 2023',
             text='value')
Dani2.update_traces( text= ev_sales_share_2023_aggregated['value'].apply(lambda x:"<1%" if x< 1 else f"{x: .0f}%"),
                  textposition='outside')

# Show the plot
Dani2.show()

ev_stock_share= evcars_historical[evcars_historical['parameter'] == 'EV stock share']
oil_displacement= evcars_historical[evcars_historical['parameter'] == 'Oil displacement Mbd']
merge_data= pd.merge(ev_stock_share, oil_displacement, on=['region','year'], suffixes=('_ev', '_oil'))
Dani3= px.scatter(merge_data, x='value_ev', y='value_oil',
                color='region',
                size='value_oil',
                title='EV Stock Share vs Oil Displacement(Mbd)',
                labels={'value_ev':'Ev Stock Share(%)', 'value_oil':'Oil displacement (Mbd)'}
                )

Dani3.show()

electricity = evcars_historical[evcars_historical['parameter'] == 'Electricity demand']
oil_displacement = evcars_historical[evcars_historical['parameter'] == 'Oil displacement Mbd']
#merge the two dataframes by region and year
merged_data = pd.merge(electricity, oil_displacement, on=['region', 'year'])
aggregated_data = merged_data.groupby('year')[['value_x', 'value_y']].sum().reset_index()
aggregated_data.rename(columns={'value_x': 'Electricity Demand (GWh)', 'value_y': 'Oil Displacement (Mbd)'}, inplace=True)

Dani4 = go.Figure()

#Electricity Demand trace
Dani4.add_trace(
    go.Scatter(
        x=aggregated_data['year'],
        y=aggregated_data['Electricity Demand (GWh)'],
        name="Electricity Demand (GWh)",
        mode="lines+markers",
        line=dict(color='blue')
    )
)

# Oil Displacement trace
Dani4.add_trace(
    go.Scatter(
        x=aggregated_data['year'],
        y=aggregated_data['Oil Displacement (Mbd)'],
        name="Oil Displacement (Mbd)",
        mode="lines+markers",
        line=dict(color='orange'),
        yaxis="y2" ,
        marker=dict(symbol='triangle-up', size=10) # Changed symbol to 'triangle-up'
    )
)

# layout for dual axes
Dani4.update_layout(
    title="Electricity Demand and Oil Displacement Over Time",
    xaxis_title="Year",
    yaxis=dict(
        title="Electricity Demand (GWh)",
        titlefont=dict(color='blue'),
        tickfont=dict(color='blue'),
    ),
    yaxis2=dict(
        title="Oil Displacement (Mbd)",
        titlefont=dict(color='orange'),
        tickfont=dict(color='orange'),
        overlaying="y",
        side="right",
    ),
    legend=dict(
        x=1.2, y=1.0, xanchor="center", orientation="v"
    ),
    template="plotly"
)

Dani4.show()

app = Dash(__name__)

app.layout = html.Div([
    html.H1("EV Data Dash App", style={'text-align': 'center'}),

    html.Div([
        html.H2("Replicated Graph 1"),
        html.P("This graph shows the percentage of EV sales by region over time. The world is on a steady rise, "
               "but regions like Norway dominate with high percentages, reflecting aggressive EV adoption. "
               "Meanwhile, the USA lags behind compared to the EU and China."),
        dcc.Graph(id='ev-sales-share', figure=Dani1)
    ]),

    html.Div([
        html.H2("Replicated Graph 2"),
        html.P("This horizontal bar chart shows EV sales share across different regions in 2023. Norway leads with "
               "the highest EV adoption, while countries like India and South Africa show relatively low adoption."),
        dcc.Graph(id='ev-sales-2023', figure=Dani2)
    ]),

    html.Div([
        html.H2("EV Stock Share vs Oil Displacement Among Different Regions"),
        html.P("This scatter plot shows how the EV stock share is correlated with oil displacement. As EV stock share "
               "increases, oil consumption decreases significantly, especially on a global scale. However, countries like "
               "China still consume a substantial amount of oil despite higher EV stock shares."),
        dcc.Graph(id='ev-vs-oil', figure=Dani3)
    ]),

    html.Div([
        html.H2("Electricity Demand and Oil Displacement Over Time"),
          html.P("This graph shows how Electricity Demand is positively correlated to Oil Displacement."
          "This means as Electricity demand goes up, the amount of Oil needed directly goes down as a result. "
               "This showcases a shift toward renewable energy "
               "sources and a reduction in reliance on fossil fuels."),
        dcc.Graph(id='electricity-vs-oil', figure=Dani4)
    ])
])

if __name__ == '__main__':
    app.run_server(debug=True, port=8080)
